diff --git a/core/modules/forum/src/Form/ContainerForm.php b/core/modules/forum/src/Form/ContainerForm.php
index b7f62fc..2fd8e3d 100644
--- a/core/modules/forum/src/Form/ContainerForm.php
+++ b/core/modules/forum/src/Form/ContainerForm.php
@@ -28,14 +28,10 @@ public function form(array $form, FormStateInterface $form_state) {
     $taxonomy_term = $this->entity;
     // Build the bulk of the form from the parent forum form.
     $form = parent::form($form, $form_state, $taxonomy_term);
+     $this->forumFormType = $this->t('forum container');
+   // Update the description.
+    $form['weight']['#description'] = $this->t('Containers are displayed in ascending order by weight.');
 
-    // Set the title and description of the name field.
-    $form['name']['#title'] = $this->t('Container name');
-    $form['name']['#description'] = $this->t('Short but meaningful name for this collection of related forums.');
-
-    // Alternate description for the container parent.
-    $form['parent'][0]['#description'] = $this->t('Containers are usually placed at the top (root) level, but may also be placed inside another container or forum.');
-    $this->forumFormType = $this->t('forum container');
     return $form;
   }
 
@@ -47,5 +43,24 @@ public function buildEntity(array $form, FormStateInterface $form_state) {
     $entity->forum_container = TRUE;
     return $entity;
   }
+  /**
+   * {@inheritdoc}
+   */
+  public function prepareEntity() {
+    parent::prepareEntity();
+    // Set the title and description of the name field.
+    $this->entity->get('name')->getDataDefinition()->setLabel('Container name');
+    $this->entity->get('name')->getDataDefinition()->setDescription('Short but meaningful name for this collection of related forums.');
+  }
+  /**
+   * {@inheritdoc}
+   */
+  protected function forumParentSelect($tid, $title) {
+    $parent_select = parent::forumParentSelect($tid, $title);
+    // Change the description of the parent select.
+    $parent_select['#description'] = $this->t('Containers are usually placed at the top (root) level, but may also be placed inside another container or forum.');
+    return $parent_select;
+  }
+
 
 }
diff --git a/core/modules/forum/src/Form/ForumForm.php b/core/modules/forum/src/Form/ForumForm.php
index 4641781..fc25488 100644
--- a/core/modules/forum/src/Form/ForumForm.php
+++ b/core/modules/forum/src/Form/ForumForm.php
@@ -38,15 +38,11 @@ public function form(array $form, FormStateInterface $form_state) {
     // Build the bulk of the form from the parent taxonomy term form.
     $form = parent::form($form, $form_state, $taxonomy_term);
 
-    // Set the title and description of the name field.
-    $form['name']['#title'] = $this->t('Forum name');
-    $form['name']['#description'] = $this->t('Short but meaningful name for this collection of threaded discussions.');
-
-    // Change the description.
-    $form['description']['#description'] = $this->t('Description and guidelines for discussions within this forum.');
 
     // Re-use the weight field.
     $form['weight'] = $form['relations']['weight'];
+// But update the description.
+    $form['weight']['#description'] = $this->t('Forums are displayed in ascending order by weight.Forums are displayed in ascending order by weight.');
 
     // Remove the remaining relations fields.
     unset($form['relations']);
@@ -170,5 +166,16 @@ protected function forumParentSelect($tid, $title) {
       '#required' => TRUE,
     );
   }
+  /**
+   * {@inheritdoc}
+   */
+  public function prepareEntity() {
+    parent::prepareEntity();
+    // Set the title and description of the name field.
+    $this->entity->get('name')->getDataDefinition()->setLabel('Forum name');
+    $this->entity->get('name')->getDataDefinition()->setDescription('Short but meaningful name for this collection of threaded discussions.');
+    // Change the description.
+    $this->entity->get('description')->getDataDefinition()->setDescription('Description and guidelines for discussions within this forum.');
+  }
 
 }
diff --git a/core/modules/forum/src/Tests/ForumTest.php b/core/modules/forum/src/Tests/ForumTest.php
index 6feb754..1e7c5c1 100644
--- a/core/modules/forum/src/Tests/ForumTest.php
+++ b/core/modules/forum/src/Tests/ForumTest.php
@@ -341,8 +341,13 @@ private function doAdminTests($user) {
     // Test relations widget exists.
     $relations_widget = $this->xpath("//details[@id='edit-relations']");
     $this->assertTrue(isset($relations_widget[0]), 'Relations widget element found.');
+	 // Test for forum specific descriptions and labels.
++    $this->verifyForumForm('forum');
++    // Test for container specific descriptions and labels.
++    $this->verifyForumForm('container');  
   }
 
+
   /**
    * Edits the forum taxonomy.
    */
@@ -664,4 +669,33 @@ private function generateForumTopics() {
       $this->nids[] = $node->id();
     }
   }
+
+  /**
+   * Verifies if forum form descriptions and labels are correct.
+   *
+   * @param string $type
+   *   The forum type (forum container or forum).
+   */
+  protected function verifyForumForm($type) {
+    $this->drupalGet('admin/structure/forum/add/' . $type);
+    switch ($type) {
+      case 'forum':
+        $this->assertRaw('Forum name', 'Forum title field label found');
+        $this->assertRaw('Short but meaningful name for this collection of threaded discussions.', 'Forum title field description found.');
+        $this->assertRaw('Forums are displayed in ascending order by weight.', 'Forum weight field description found.');
+        $this->assertRaw('Description and guidelines for discussions within this forum.', 'Forum description field description found.');
+        break;
+
+      case 'container':
+        $this->assertRaw('Container name', 'Container title field label found.');
+        $this->assertRaw('Short but meaningful name for this collection of related forums.', 'Container title field description found.');
+        $this->assertRaw('Containers are displayed in ascending order by weight.', 'Container weight field description found.');
+        $this->assertRaw('Containers are usually placed at the top (root) level, but may also be placed inside another container or forum.', 'Container parent field description found.');
+        $this->assertRaw('Description and guidelines for discussions within this forum.', 'Container description field description found.');
+       break;
+
+      default:
+        break;
+   }
+  }
 }
